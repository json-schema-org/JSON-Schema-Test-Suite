[
    {
        "description": "root pointer ref",
        "schema": {
            "properties": {
                "foo": {"$ref": "#"}
            },
            "additionalProperties": false
        },
        "tests": [
            {
                "description": "match",
                "data": {"foo": false},
                "valid": true
            },
            {
                "description": "recursive match",
                "data": {"foo": {"foo": false}},
                "valid": true
            },
            {
                "description": "mismatch",
                "data": {"bar": false},
                "valid": false
            },
            {
                "description": "recursive mismatch",
                "data": {"foo": {"bar": false}},
                "valid": false
            }
        ]
    },
    {
        "description": "relative pointer ref",
        "schema": {
            "properties": {
                "foo": {"type": "integer"},
                "bar": {"$ref": "#/properties/foo"}
            }
        },
        "tests": [
            {
                "description": "match",
                "data": {"bar": 3},
                "valid": true
            },
            {
                "description": "mismatch",
                "data": {"bar": true},
                "valid": false
            }
        ]
    },
    {
        "description": "relative uri ref",
        "schema": {
            "id": "/a/schema.json",
            "type": "array",
            "items": {
                "id": "schema/subfile.json",
                "type": "object",
                "properties": {
                    "foo": {"type": "integer"},
                    "barempty": {"$ref": ""},
                    "barname": {"$ref": "subfile.json"},
                    "bazrel": {"$ref": "../schema.json"},
                    "bazpath": {"$ref": "/a/schema.json"}
                }
            }
        },
        "tests": [
            {
                "description": "No-ref match",
                "data": [{"foo": 1}],
                "valid": true
            },
            {
                "description": "No-ref mismatch",
                "data": [{"foo": true}],
                "valid": false
            },
            {
                "description": "empty match",
                "data": [{"barempty": {}}],
                "valid": true
            },
            {
                "description": "empty mismatch",
                "data": [{"barempty": true}],
                "valid": false
            },
            {
                "description": "file match",
                "data": [{"barname": {}}],
                "valid": true
            },
            {
                "description": "file mismatch",
                "data": [{"barname": true}],
                "valid": false
            },
            {
                "description": "deep file match",
                "data": [{"barname": {"barname": {"barname": {"bazrel": [{"foo": 1}]}}}}],
                "valid": true
            },
            {
                "description": "deep file mismatch",
                "data": [{"barname": {"barname": {"barname": {"bazrel": {}}}}}],
                "valid": false
            },
            {
                "description": "relative path match",
                "data": [{"bazrel": [{"foo": 1}]}],
                "valid": true
            },
            {
                "description": "relative path mismatch",
                "data": [{"bazrel": {}}],
                "valid": false
            },
            {
                "description": "full path match",
                "data": [{"bazpath": [{"foo": 1}]}],
                "valid": true
            },
            {
                "description": "full path mismatch",
                "data": [{"bazpath": {}}],
                "valid": false
            }
        ]
    },
    {
        "description": "uri encoded pointer ref",
        "schema": {
            "tilda~field": {"type": "integer"},
            "slash/field": {"type": "integer"},
            "percent%field": {"type": "integer"},
            "space field": {"type": "integer"},
            "hash#field": {"type": "integer"},
            "properties": {
                "space": {"$ref": "#/space%20field"},
                "hash": {"$ref": "#/hash%23field"},
                "percent": {"$ref": "#/percent%25field"},
                "tilda": {"$ref": "#/%74%69%6c%64%61%7E%66%69%65%6C%64"},
                "slash": {"$ref": "#/slash%2ffield"}
            }
        },
        "tests": [
            {
                "description": "space valid",
                "data": {"space": 104},
                "valid": true
            },
            {
                "description": "space invalid",
                "data": {"space": "aoeu"},
                "valid": false
            },
            {
                "description": "hash valid",
                "data": {"hash": 104},
                "valid": true
            },
            {
                "description": "hash invalid",
                "data": {"hash": "aoeu"},
                "valid": false
            },
            {
                "description": "percent valid",
                "data": {"percent": 104},
                "valid": true
            },
            {
                "description": "percent invalid",
                "data": {"percent": "aoeu"},
                "valid": false
            },
            {
                "description": "uri-encoded tilda valid",
                "data": {"tilda": 2},
                "valid": true
            },
            {
                "description": "uri-encoded tilda invalid",
                "data": {"tilda": "aoeu"},
                "valid": false
            },
            {
                "description": "uri-encoded slash valid",
                "data": {"slash": 1},
                "valid": true
            },
            {
                "description": "uri-encoded slash invalid",
                "data": {"slash": "aoeu"},
                "valid": false
            }
        ]
    },
    {
        "description": "json pointer ref",
        "schema": {
            "tilda~field": {"type": "integer"},
            "slash/field": {"type": "integer"},
            "properties": {
                "tilda": {"$ref": "#/tilda~0field"},
                "slash": {"$ref": "#/slash~1field"}
            }
        },
        "tests": [
            {
                "description": "tilda-encoded slash valid",
                "data": {"slash": 1},
                "valid": true
            },
            {
                "description": "tilda-encoded slash invalid",
                "data": {"slash": "aoeu"},
                "valid": false
            },
            {
                "description": "tilda-encoded tilda valid",
                "data": {"tilda": 2},
                "valid": true
            },
            {
                "description": "tilda-encoded tilda invalid",
                "data": {"tilda": "aoeu"},
                "valid": false
            }
        ]
    },
    {
        "description": "nested refs",
        "schema": {
            "definitions": {
                "a": {"type": "integer"},
                "b": {"$ref": "#/definitions/a"},
                "c": {"$ref": "#/definitions/b"}
            },
            "$ref": "#/definitions/c"
        },
        "tests": [
            {
                "description": "nested ref valid",
                "data": 5,
                "valid": true
            },
            {
                "description": "nested ref invalid",
                "data": "a",
                "valid": false
            }
        ]
    },
    {
        "description": "remote ref, containing refs itself",
        "schema": {"$ref": "http://json-schema.org/draft-03/schema#"},
        "tests": [
            {
                "description": "remote ref valid",
                "data": {"items": {"type": "integer"}},
                "valid": true
            },
            {
                "description": "remote ref invalid",
                "data": {"items": {"type": 1}},
                "valid": false
            }
        ]
    }
]
