[
    {
        "description": "Location-independent identifier",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$ref": "#foo",
            "$defs": {
                "A": {
                    "$anchor": "foo",
                    "type": "integer"
                }
            }
        },
        "tests": [
            {
                "data": 1,
                "description": "match",
                "valid": true
            },
            {
                "data": "a",
                "description": "mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "Location-independent identifier with absolute URI",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$ref": "http://localhost:1234/draft2020-12/bar#foo",
            "$defs": {
                "A": {
                    "$id": "http://localhost:1234/draft2020-12/bar",
                    "$anchor": "foo",
                    "type": "integer"
                }
            }
        },
        "tests": [
            {
                "data": 1,
                "description": "match",
                "valid": true
            },
            {
                "data": "a",
                "description": "mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "Location-independent identifier with base URI change in subschema",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$id": "http://localhost:1234/draft2020-12/root",
            "$ref": "http://localhost:1234/draft2020-12/nested.json#foo",
            "$defs": {
                "A": {
                    "$id": "nested.json",
                    "$defs": {
                        "B": {
                            "$anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "tests": [
            {
                "data": 1,
                "description": "match",
                "valid": true
            },
            {
                "data": "a",
                "description": "mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "same $anchor with different base uri",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$id": "http://localhost:1234/draft2020-12/foobar",
            "$defs": {
                "A": {
                    "$id": "child1",
                    "allOf": [
                        {
                            "$id": "child2",
                            "$anchor": "my_anchor",
                            "type": "number"
                        },
                        {
                            "$anchor": "my_anchor",
                            "type": "string"
                        }
                    ]
                }
            },
            "$ref": "child1#my_anchor"
        },
        "tests": [
            {
                "description": "$ref resolves to /$defs/A/allOf/1",
                "data": "a",
                "valid": true
            },
            {
                "description": "$ref does not resolve to /$defs/A/allOf/0",
                "data": 1,
                "valid": false
            }
        ]
    },
    {
        "description": "anchor validity",
        "comment": "Section 8.2.2",
        "schema": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "$ref": "https://json-schema.org/draft/2020-12/schema"
        },
        "tests": [
            {
                "description": "MUST NOT start with #",
                "data": { "$anchor" : "#foo" },
                "valid": false
            },
            {
                "description": "MUST NOT start with number",
                "data": { "$anchor" : "0number" },
                "valid": false
            },
            {
                "description": "MUST NOT start with period",
                "data": { "$anchor" : ".period" },
                "valid": false
            },
            {
                "description": "MUST NOT start with hyphen",
                "data": { "$anchor" : "-hyphen" },
                "valid": false
            },
            {
                "description": "MAY start with underscore",
                "data": { "$anchor" : "_underscore" },
                "valid": true
            },
            {
                "description": "MUST NOT contain colon",
                "data": { "$anchor" : "inner:colon" },
                "valid": false
            },
            {
                "description": "MAY contain underscore",
                "data": { "$anchor" : "under_score" },
                "valid": true
            },
            {
                "description": "MAY contain hyphen",
                "data": { "$anchor" : "inner-hyphen" },
                "valid": true
            },
            {
                "description": "MAY contain period",
                "data": { "$anchor" : "inner.period" },
                "valid": true
            },
            {
                "description": "MAY contain numbers",
                "data": { "$anchor" : "start0123456789end" },
                "valid": true
            },
            {
                "description": "JSON pointers are not valid",
                "data": { "$anchor" : "/a/b" },
                "valid": false
            },
            {
                "description": "invalid with valid beginning",
                "data": { "$anchor" : "foo#something" },
                "valid": false
            }
        ]
    }
]
