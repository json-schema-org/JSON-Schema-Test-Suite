[
    {
        "description": "Location-independent identifier",
        "schema": {
            "$ref": "#foo",
            "$defs": {
                "A": {
                    "$anchor": "foo",
                    "type": "integer"
                }
            }
        },
        "tests": [
            {
                "data": 1,
                "description": "match",
                "valid": true
            },
            {
                "data": "a",
                "description": "mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "Location-independent identifier with absolute URI",
        "schema": {
            "$ref": "http://localhost:1234/bar#foo",
            "$defs": {
                "A": {
                    "$id": "http://localhost:1234/bar",
                    "$anchor": "foo",
                    "type": "integer"
                }
            }
        },
        "tests": [
            {
                "data": 1,
                "description": "match",
                "valid": true
            },
            {
                "data": "a",
                "description": "mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "Location-independent identifier with base URI change in subschema",
        "schema": {
            "$id": "http://localhost:1234/root",
            "$ref": "http://localhost:1234/nested.json#foo",
            "$defs": {
                "A": {
                    "$id": "nested.json",
                    "$defs": {
                        "B": {
                            "$anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "tests": [
            {
                "data": 1,
                "description": "match",
                "valid": true
            },
            {
                "data": "a",
                "description": "mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "Fragment syntax disallowed",
        "schema": {
            "$ref": "#foo",
            "$defs": {
                "A": {
                    "$anchor": "#foo",
                    "type": "integer"
                }
            }
        },
        "tests": [
            {
                "data": 1,
                "description": "match",
                "valid": false
            },
            {
                "data": "a",
                "description": "mismatch",
                "valid": false
            }
        ]
    },
    {
        "description": "Invalid characters disallowed",
        "schema": {
            "$ref": "#/a/b",
            "$defs": {
                "A": {
                    "$anchor": "/a/b",
                    "type": "integer"
                }
            }
        },
        "tests": [
            {
                "data": 1,
                "description": "match",
                "valid": false
            },
            {
                "data": "a",
                "description": "mismatch",
                "valid": false
            }
        ]
    }
]
