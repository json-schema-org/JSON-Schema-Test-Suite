[
    {
        "description": "anyOf",
        "schema": {
            "anyOf": [
                {
                    "type": "integer"
                },
                {
                    "minimum": 2
                }
            ]
        },
        "tests": [
            {
                "description": "first anyOf valid",
                "data": 1,
                "valid": true
            },
            {
                "description": "second anyOf valid",
                "data": 2.5,
                "valid": true
            },
            {
                "description": "both anyOf valid",
                "data": 3,
                "valid": true
            },
            {
                "description": "neither anyOf valid",
                "data": 1.5,
                "valid": false
            }
        ]
    },
    {
        "description": "anyOf with base schema",
        "schema": {
            "type": "string",
            "anyOf" : [
                {
                    "maxLength": 2
                },
                {
                    "minLength": 4
                }
            ]
        },
        "tests": [
            {
                "description": "mismatch base schema",
                "data": 3,
                "valid": false
            },
            {
                "description": "one anyOf valid",
                "data": "foobar",
                "valid": true
            },
            {
                "description": "both anyOf invalid",
                "data": "foo",
                "valid": false
            }
        ]
    },
    {
        "description": "anyOf with boolean schemas, all true",
        "schema": {"anyOf": [true, true]},
        "tests": [
            {
                "description": "any value is valid",
                "data": "foo",
                "valid": true
            }
        ]
    },
    {
        "description": "anyOf with boolean schemas, some true",
        "schema": {"anyOf": [true, false]},
        "tests": [
            {
                "description": "any value is valid",
                "data": "foo",
                "valid": true
            }
        ]
    },
    {
        "description": "anyOf with boolean schemas, all false",
        "schema": {"anyOf": [false, false]},
        "tests": [
            {
                "description": "any value is invalid",
                "data": "foo",
                "valid": false
            }
        ]
    },
    {
        "description": "anyOf complex types",
        "schema": {
            "anyOf": [
                {
                    "properties": {
                        "bar": {"type": "integer"}
                    },
                    "required": ["bar"]
                },
                {
                    "properties": {
                        "foo": {"type": "string"}
                    },
                    "required": ["foo"]
                }
            ]
        },
        "tests": [
            {
                "description": "first anyOf valid (complex)",
                "data": {"bar": 2},
                "valid": true
            },
            {
                "description": "second anyOf valid (complex)",
                "data": {"foo": "baz"},
                "valid": true
            },
            {
                "description": "both anyOf valid (complex)",
                "data": {"foo": "baz", "bar": 2},
                "valid": true
            },
            {
                "description": "neither anyOf valid (complex)",
                "data": {"foo": 2, "bar": "quux"},
                "valid": false
            }
        ]
    },
    {
        "description": "anyOf with one empty schema",
        "schema": {
            "anyOf": [
                { "type": "number" },
                {}
            ]
        },
        "tests": [
            {
                "description": "string is valid",
                "data": "foo",
                "valid": true
            },
            {
                "description": "number is valid",
                "data": 123,
                "valid": true
            }
        ]
    },
    {
        "description": "nested anyOf, to check validation semantics",
        "schema": {
            "anyOf": [
                {
                    "anyOf": [
                        {
                            "type": "null"
                        }
                    ]
                }
            ]
        },
        "tests": [
            {
                "description": "null is valid",
                "data": null,
                "valid": true
            },
            {
                "description": "anything non-null is invalid",
                "data": 123,
                "valid": false
            }
        ]
    },
    {
        "description": "Meta-schema applicator tests: Boolean logic",
        "schema": {
            "$ref": "https://json-schema.org/draft/2019-09/schema"
        },
        "tests": [
            {
                "description": "Non-array anyOf: number",
                "data": {
                    "anyOf": 1
                },
                "valid": false
            },
            {
                "description": "Non-array anyOf: string",
                "data": {
                    "anyOf": "hello"
                },
                "valid": false
            },
            {
                "description": "Non-array anyOf: Boolean",
                "data": {
                    "anyOf": true
                },
                "valid": false
            },
            {
                "description": "Non-array anyOf: object",
                "data": {
                    "anyOf": {}
                },
                "valid": false
            },
            {
                "description": "Non-array anyOf: null",
                "data": {
                    "anyOf": null
                },
                "valid": false
            },
            {
                "description": "Empty anyOf",
                "data": {
                    "anyOf": []
                },
                "valid": false
            },
            {
                "description": "Not-a-schema anyOf: string",
                "data": {
                    "anyOf": [ "integer" ]
                },
                "valid": false
            },
            {
                "description": "Not-a-schema anyOf: number",
                "data": {
                    "anyOf": [ 1 ]
                },
                "valid": false
            },
            {
                "description": "Not-a-schema anyOf: null",
                "data": {
                    "anyOf": [ null ]
                },
                "valid": false
            },
            {
                "description": "Not-a-schema anyOf: array",
                "data": {
                    "anyOf": [ [] ]
                },
                "valid": false
            },
            {
                "description": "Valid anyOf: boolean schema",
                "data": {
                    "anyOf": [ true ]
                },
                "valid": true
            },
            {
                "description": "Valid anyOf: empty schema",
                "data": {
                    "anyOf": [ {} ]
                },
                "valid": true
            },
            {
                "description": "Valid anyOf: schema",
                "data": {
                    "anyOf": [ { "type": "integer" } ]
                },
                "valid": true
            }
        ]
    }
]
